--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

--// Game refs (same as your original)
local fishFolder = ReplicatedStorage:WaitForChild("A__Assets"):WaitForChild("Fish")
local addToInventoryRF = ReplicatedStorage:WaitForChild("Packages")
	:WaitForChild("_Index")
	:WaitForChild("sleitnick_knit@1.7.0")
	:WaitForChild("knit")
	:WaitForChild("Services")
	:WaitForChild("FishService")
	:WaitForChild("RF")
	:WaitForChild("AddToInventory")

--// Load Rayfield
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
-- (alt: "https://raw.githubusercontent.com/shlexware/Rayfield/main/source")

--// Build list of fish names
local fishNames = {}
for _, fish in ipairs(fishFolder:GetChildren()) do
	table.insert(fishNames, fish.Name)
end
table.sort(fishNames)

--// Create Window
local Window = Rayfield:CreateWindow({
	Name = "Fish Catcher",
	LoadingTitle = "Fish Catcher",
	LoadingSubtitle = "Rayfield UI",
	DisableRayfieldPrompts = false,
	ConfigurationSaving = {Enabled = false},
	KeySystem = false,
})

--// Main Tab
local Tab = Window:CreateTab("Main")

local selectedFishName

-- Dropdown
local Dropdown = Tab:CreateDropdown({
	Name = "Select Fish",
	Options = fishNames,
	CurrentOption = nil,
	MultipleOptions = false,
	Callback = function(option)
		selectedFishName = option
	end
})

-- Button
Tab:CreateButton({
	Name = "Get Fish",
	Callback = function()
		if not selectedFishName then
			Rayfield:Notify({Title = "Fish Catcher", Content = "Please select a fish first.", Duration = 4})
			return
		end

		local args = {selectedFishName, "Catch"}
		local ok, err = pcall(function()
			return addToInventoryRF:InvokeServer(unpack(args))
		end)

		if ok then
			Rayfield:Notify({Title = "Success", Content = "Added: "..tostring(selectedFishName), Duration = 4})
		else
			Rayfield:Notify({Title = "Failed", Content = tostring(err), Duration = 6})
		end
	end
})

-- Optional: Refresh dropdown if fish folder changes while running
fishFolder.ChildAdded:Connect(function(child)
	table.insert(fishNames, child.Name)
	table.sort(fishNames)
	-- Rayfield refresh pattern:
	if Dropdown and Dropdown.Refresh then
		Dropdown:Refresh(fishNames, true) -- keep current selection
	end
end)
fishFolder.ChildRemoved:Connect(function(child)
	for i, name in ipairs(fishNames) do
		if name == child.Name then table.remove(fishNames, i) break end
	end
	if Dropdown and Dropdown.Refresh then
		Dropdown:Refresh(fishNames, true)
	end
end)

-- Extra tab with Close
local Misc = Window:CreateTab("Misc")
Misc:CreateButton({
	Name = "Close UI",
	Callback = function()
		Rayfield:Destroy()
	end
})
